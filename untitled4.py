# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wdVjDop_3ni0uzEA-6y23uveXXookSHj
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
import io
from google.colab import files
uploaded = files.upload()

# Mostrar los nombres de los archivos subidos para verificar el nombre correcto
print(uploaded.keys())

# Usa el nombre exacto que se muestra en uploaded.keys()
file_name = list(uploaded.keys())[0]  # Toma el nombre del primer archivo subido

# Cargar el archivo CSV
data = pd.read_csv(io.BytesIO(uploaded[file_name]))

# Visualizar las primeras filas para verificar que los datos se cargaron correctamente
print(data.head())

X = data[['Age', 'Cholesterol', 'BloodPressure']]  # Selección de las columnas
y = data['HeartDisease']  # Variable objetivo


# Paso 2: Dividir el conjunto de datos en entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Paso 3: Estandarizar los datos (es recomendable para modelos como la regresión logística)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Paso 4: Entrenar el modelo de regresión logística
model = LogisticRegression()
model.fit(X_train, y_train)

# Paso 5: Hacer predicciones sobre el conjunto de prueba
y_pred = model.predict(X_test)

# Paso 6: Evaluar el modelo
# Calcular la precisión
accuracy = accuracy_score(y_test, y_pred)
print(f"Precisión del modelo: {accuracy * 100:.2f}%")

# Generar la matriz de confusión
conf_matrix = confusion_matrix(y_test, y_pred)
print("Matriz de confusión:")
print(conf_matrix)

# Visualizar la matriz de confusión usando un mapa de calor
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.ylabel('Valores reales')
plt.xlabel('Valores predichos')
plt.title('Matriz de Confusión')
plt.show()